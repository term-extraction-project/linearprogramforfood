import streamlit as st
import pandas as pd
from scipy.optimize import linprog  # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
import numpy as np
import itertools
import matplotlib.pyplot as plt


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
df_ingr_all = pd.read_csv('ingredients_2.csv')
cols_to_divide = ['–í–æ–¥–∞', '–ë–µ–ª–∫–∏', '–£–≥–ª–µ–≤–æ–¥—ã', '–ñ–∏—Ä—ã']

for col in cols_to_divide:
    df_ingr_all[col] = df_ingr_all[col].astype(str).str.replace(',', '.', regex=False)
    df_ingr_all[col] = pd.to_numeric(df_ingr_all[col], errors='coerce')

df_ingr_all[cols_to_divide] = df_ingr_all[cols_to_divide] / 100
df_ingr_all['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ'] = df_ingr_all['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'] + ' ‚Äî ' + df_ingr_all['–û–ø–∏—Å–∞–Ω–∏–µ']

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "selected_ingredients" not in st.session_state:
    st.session_state.selected_ingredients = set()

st.title("üç≤ –í—ã–±–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")

# --- –ü—Ä–∏–º–µ—Ä CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ ---
st.markdown("""
    <style>
    /* –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ */
    .block-container {
        padding-top: 0rem;
        padding-bottom: 0rem;
    }
    /* –ö–∞—Ç–µ–≥–æ—Ä–∏—è: —è—Ä–∫–∏–π —Ñ–æ–Ω */
    div[data-testid="stExpander"] > div:first-child {
        background-color: #007BFF;  /* –Ø—Ä–∫–æ-—Å–∏–Ω–∏–π */
        color: white;
        border-radius: 6px;
        margin-bottom: 0px;
    }
    /* –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: —Å–µ—Ä—ã–π —Ñ–æ–Ω */
    div[data-testid="stExpander"] > div:nth-child(2) > div > div > div[data-testid="stExpander"] > div:first-child {
        background-color: #CCCCCC;  /* –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π */
        color: black;
    }
    /* –ö–Ω–æ–ø–∫–∏ –æ–ø–∏—Å–∞–Ω–∏–π: –±–µ–ª—ã–µ, –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ */
    button[kind="secondary"] {
        background-color: white !important;
        color: black !important;
        border-radius: 0px !important;
        border: 1px solid #ccc !important;
        margin: 2px 0px;
    }
    </style>
""", unsafe_allow_html=True)

# --- –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö ---
df_ingr_all = pd.DataFrame({
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–ú—è—Å–æ", "–ú—è—Å–æ", "–û–≤–æ—â–∏"],
    "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ["–ö—É—Ä–∏—Ü–∞", "–ì–æ–≤—è–¥–∏–Ω–∞", "–ú–æ—Ä–∫–æ–≤—å"],
    "–û–ø–∏—Å–∞–Ω–∏–µ": ["–§–∏–ª–µ", "–ü–µ—á–µ–Ω—å", "–ù–∞—Ä–µ–∑–∞–Ω–Ω–∞—è"]
})

# --- –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ ---
if "selected_ingredients" not in st.session_state:
    st.session_state.selected_ingredients = set()

for category in df_ingr_all['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].dropna().unique():
    with st.expander(f"{category}"):
        df_cat = df_ingr_all[df_ingr_all['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]
        for ingredient in df_cat['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'].dropna().unique():
            with st.expander(f"{ingredient}"):
                df_ing = df_cat[df_cat['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'] == ingredient]
                for desc in df_ing['–û–ø–∏—Å–∞–Ω–∏–µ'].dropna().unique():
                    label = f"{ingredient} ‚Äî {desc}"
                    key = f"{category}_{ingredient}_{desc}"
                    if st.button(f"{desc}", key=key):
                        st.session_state.selected_ingredients.add(label)

# --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ---
st.markdown("### ‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:")
if st.session_state.selected_ingredients:
    for i in sorted(st.session_state.selected_ingredients):
        col1, col2 = st.columns([5, 1])
        col1.write(i)
        if col2.button("‚ùå", key=f"remove_{i}"):
            st.session_state.selected_ingredients.remove(i)
else:
    st.info("–í—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.")

# –ü—Ä–∏–º–µ—Ä: –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
ingredient_names = list(st.session_state.selected_ingredients)
food = df_ingr_all.set_index("–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ")[cols_to_divide].to_dict(orient='index')


# --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ ---
if ingredient_names:
    st.subheader("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–≤ % –æ—Ç 100 –≥):")
    ingr_ranges = []
    for ingr in ingredient_names:
        ingr_ranges.append(st.slider(f"{ingr}", 0, 100, (5, 30)))

    # --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º ---
    st.subheader("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º:")
    nutr_ranges = {}
    for nutr in cols_to_divide:
        nutr_ranges[nutr] = st.slider(f"{nutr}", 0, 100, (0, 100))

    # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ LP ---
    A = [
        [food[ing][nutr] if val > 0 else -food[ing][nutr]
         for ing in ingredient_names]
        for nutr in nutr_ranges
        for val in (-nutr_ranges[nutr][0]/100, nutr_ranges[nutr][1]/100)
    ]
    b = [
        val / 100 for nutr in nutr_ranges
        for val in (-nutr_ranges[nutr][0], nutr_ranges[nutr][1])
    ]

    A_eq = [[1 for _ in ingredient_names]]
    b_eq = [1.0]
    bounds = [(low/100, high/100) for (low, high) in ingr_ranges]

    # --- –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
    st.subheader("–ß—Ç–æ –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å?")
    selected_maximize = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏:",
        cols_to_divide,
        default=cols_to_divide
    )

    f = [-sum(food[i][nutr] for nutr in selected_maximize) for i in ingredient_names]

    # --- –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ---
    if st.button("üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤"):
        res = linprog(f, A_ub=A, b_ub=b, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method="highs")

        if res.success:
            st.success("‚úÖ –†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!")
            result = {name: round(val * 100, 2) for name, val in zip(ingredient_names, res.x)}
            st.markdown("### üì¶ –°–æ—Å—Ç–∞–≤ (–≤ –≥—Ä–∞–º–º–∞—Ö –Ω–∞ 100 –≥):")
            for name, value in result.items():
                st.write(f"{name}: **{value} –≥**")

            st.markdown("### üí™ –ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 100 –≥:")
            nutrients = {
                nutr: round(sum(res.x[i] * food[name][nutr] for i, name in enumerate(ingredient_names)) * 100, 2)
                for nutr in cols_to_divide
            }
            for k, v in nutrients.items():
                st.write(f"**{k}:** {v} –≥")
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")

            with st.spinner("üîÑ –ò—â–µ–º –ø–æ –¥—Ä—É–≥–æ–º—É –º–µ—Ç–æ–¥—É..."):
        
                    step = 1  # —à–∞–≥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                    variants = []
                    ranges = [np.arange(low, high + step, step) for (low, high) in ingr_ranges]
        
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –≤ —Å—É–º–º–µ 100 –≥
                    for combo in itertools.product(*ranges):
                        if abs(sum(combo) - 100) < 1e-6:
                            variants.append(combo)
        
                    best_recipe = None
                    min_penalty = float("inf")
        
                    for combo in variants:
                        values = dict(zip(ingredient_names, combo))
        
                        totals = {nutr: 0.0 for nutr in cols_to_divide}
                        for i, ingr in enumerate(ingredient_names):
                            for nutr in cols_to_divide:
                                totals[nutr] += values[ingr] * food[ingr][nutr]
        
                        # –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
                        penalty = 0
                        for nutr in cols_to_divide:
                            val = totals[nutr]
                            min_val = nutr_ranges[nutr][0]
                            max_val = nutr_ranges[nutr][1]
        
                            if val < min_val:
                                penalty += min_val - val
                            elif val > max_val:
                                penalty += val - max_val
        
                        if penalty < min_penalty:
                            min_penalty = penalty
                            best_recipe = (values, totals)

            if best_recipe:
                values, totals = best_recipe
                st.success("‚öôÔ∏è –ù–∞–π–¥–µ–Ω —Å–æ—Å—Ç–∞–≤ –≤—Ä—É—á–Ω—É—é (–ø–µ—Ä–µ–±–æ—Ä–æ–º):")

                st.markdown("### üì¶ –°–æ—Å—Ç–∞–≤ (–≤ –≥—Ä–∞–º–º–∞—Ö –Ω–∞ 100 –≥):")
                for name, val in values.items():
                    st.write(f"{name}: **{round(val, 2)} –≥**")

                st.markdown("### üí™ –ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 100 –≥:")
                for nutr in cols_to_divide:
                    st.write(f"**{nutr}:** {round(totals[nutr], 2)} –≥")

                # --- –ì—Ä–∞—Ñ–∏–∫ 1: –°–æ—Å—Ç–∞–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ---
                fig1, ax1 = plt.subplots(figsize=(10, 6))
                
                ingr_vals = [values[i] for i in ingredient_names]
                ingr_lims = ingr_ranges
                
                lower_errors = [val - low for val, (low, high) in zip(ingr_vals, ingr_lims)]
                upper_errors = [high - val for val, (low, high) in zip(ingr_vals, ingr_lims)]
                
                ax1.errorbar(ingredient_names, ingr_vals, yerr=[lower_errors, upper_errors],
                             fmt='o', capsize=5, color='blue', ecolor='gray', elinewidth=2)
                
                ax1.set_ylabel("–ì—Ä–∞–º–º—ã")
                ax1.set_title("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
                ax1.grid(True, linestyle='--', alpha=0.5)
                plt.xticks(rotation=45)
                plt.tight_layout()
                
                st.pyplot(fig1)


                # --- –ì—Ä–∞—Ñ–∏–∫ 2: –ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ ---
                fig2, ax2 = plt.subplots(figsize=(10, 6))
                
                nutrients = list(nutr_ranges.keys())
                nutr_vals = [totals[n] for n in nutrients]
                nutr_lims = [nutr_ranges[n] for n in nutrients]
                
                for i, (nutrient, val, (low, high)) in enumerate(zip(nutrients, nutr_vals, nutr_lims)):
                    # –õ–∏–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                    ax2.plot([i, i], [low, high], color='gray', linewidth=4, alpha=0.5)
                    # –ó–Ω–∞—á–µ–Ω–∏–µ
                    ax2.plot(i, val, 'o', color='blue')
                
                ax2.set_xticks(range(len(nutrients)))
                ax2.set_xticklabels(nutrients, rotation=45)
                ax2.set_ylabel("–ì—Ä–∞–º–º—ã")
                ax2.set_title("–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞: –∑–Ω–∞—á–µ–Ω–∏—è –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã")
                ax2.grid(True, linestyle='--', alpha=0.5)
                plt.tight_layout()
                
                st.pyplot(fig2)

           
            
            else:
                st.error("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–æ—Å—Ç–∞–≤ –¥–∞–∂–µ –≤—Ä—É—á–Ω—É—é.")

else:
    st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.")
    
