import streamlit as st
from scipy.optimize import linprog
import pandas as pd




df_ingr_all = pd.read_csv('ingredients_2.csv')
cols_to_divide = [ '–í–æ–¥–∞', '–ë–µ–ª–∫–∏', '–£–≥–ª–µ–≤–æ–¥—ã', '–ñ–∏—Ä—ã']

for col in cols_to_divide:
    df_ingr_all[col] = df_ingr_all[col].astype(str).str.replace(',', '.', regex=False)
    df_ingr_all[col] = pd.to_numeric(df_ingr_all[col], errors='coerce')
    

df_ingr_all[cols_to_divide] = df_ingr_all[[ '–í–æ–¥–∞', '–ë–µ–ª–∫–∏', '–£–≥–ª–µ–≤–æ–¥—ã', '–ñ–∏—Ä—ã']] / 100
df_ingr_all['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ'] = df_ingr_all['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'] + ' - ' + df_ingr_all['–û–ø–∏—Å–∞–Ω–∏–µ']

food=df_ingr_all.set_index("–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ")[cols_to_divide].to_dict(orient='index')


st.title("–°–æ—Å—Ç–∞–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")

# –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤—ã–±–æ—Ä–∞ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç + –ø–æ–¥–≤–∏–¥)
if "selected_ingredient" not in st.session_state:
    st.session_state.selected_ingredient = None
if "selected_subtype" not in st.session_state:
    st.session_state.selected_subtype = None

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
for category in df_ingr_all['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique():
    with st.expander(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"):
        df_cat = df_ingr_all[df_ingr_all['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]

        for ingredient in df_cat['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'].unique():
            with st.expander(f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: {ingredient}"):
                df_ing = df_cat[df_cat['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'] == ingredient]

                for sub in df_ing['–û–ø–∏—Å–∞–Ω–∏–µ'].unique():
                    key = f"{category}_{ingredient}_{sub}"
                    if st.button(f"–í—ã–±—Ä–∞—Ç—å: {ingredient} ‚Äî {sub}", key=key):
                        st.session_state.selected_ingredient = ingredient
                        st.session_state.selected_subtype = sub

st.sidebar.write("–ë–µ–ª–∫–∏:", row['–ë–µ–ª–∫–∏'])
st.sidebar.write("–ñ–∏—Ä—ã:", row['–ñ–∏—Ä—ã'])
st.sidebar.write("–£–≥–ª–µ–≤–æ–¥—ã:", row['–£–≥–ª–µ–≤–æ–¥—ã'])
st.sidebar.write("–í–æ–¥–∞:", row['–í–æ–¥–∞'])

nutr_data = {
    '–ù—É—Ç—Ä–∏–µ–Ω—Ç': ['–ë–µ–ª–∫–∏', '–ñ–∏—Ä—ã', '–£–≥–ª–µ–≤–æ–¥—ã', '–í–ª–∞–≥–∞'],
    '–ù–∞ 100 –≥': [
        row['–ë–µ–ª–∫–∏'] * 100,
        row['–ñ–∏—Ä—ã'] * 100,
        row['–£–≥–ª–µ–≤–æ–¥—ã'] * 100,
        row['–í–æ–¥–∞'] * 100
    ]
}
nutr_df = pd.DataFrame(nutr_data)
st.sidebar.markdown("#### –•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤:")
st.sidebar.dataframe(nutr_df.style.format({"–ù–∞ 100 –≥": "{:.1f} –≥"}))

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞


if st.session_state.selected_ingredient and st.session_state.selected_subtype:
    # –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ (–∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞—é—Ç –ª–∏—à–Ω–∏–µ)
    selected_ing = str(st.session_state.selected_ingredient).strip()
    selected_desc = str(st.session_state.selected_subtype).strip()

    filtered = df_ingr_all[
        (df_ingr_all['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'].astype(str).str.strip() == selected_ing) &
        (df_ingr_all['–û–ø–∏—Å–∞–Ω–∏–µ'].astype(str).str.strip() == selected_desc)
    ]

    st.write("DEBUG ‚Äì –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫:", filtered.shape[0])  # ‚¨ÖÔ∏è –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–æ

    if not filtered.empty:
        row = filtered.iloc[0]

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        st.sidebar.markdown(f"### ü•£ **{row['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç']}**")
        st.sidebar.markdown(f"_–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}_")
        st.sidebar.markdown(f"_–û–ø–∏—Å–∞–Ω–∏–µ: {row['–û–ø–∏—Å–∞–Ω–∏–µ']}_")

        # –¢–∞–±–ª–∏—Ü–∞ —Å —Å–æ—Å—Ç–∞–≤–æ–º
        nutr_data = {
            '–ù—É—Ç—Ä–∏–µ–Ω—Ç': ['–ë–µ–ª–∫–∏', '–ñ–∏—Ä—ã', '–£–≥–ª–µ–≤–æ–¥—ã', '–í–ª–∞–≥–∞'],
            '–ù–∞ 100 –≥': [
                f"{row['–ë–µ–ª–∫–∏'] * 100:.1f} –≥" if pd.notnull(row['–ë–µ–ª–∫–∏']) else "–Ω/–¥",
                f"{row['–ñ–∏—Ä—ã'] * 100:.1f} –≥" if pd.notnull(row['–ñ–∏—Ä—ã']) else "–Ω/–¥",
                f"{row['–£–≥–ª–µ–≤–æ–¥—ã'] * 100:.1f} –≥" if pd.notnull(row['–£–≥–ª–µ–≤–æ–¥—ã']) else "–Ω/–¥",
                f"{row['–í–æ–¥–∞'] * 100:.1f} –≥" if pd.notnull(row['–í–æ–¥–∞']) else "–Ω/–¥"
            ]
        }

        nutr_df = pd.DataFrame(nutr_data)
        st.sidebar.markdown("#### –•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤:")
        st.sidebar.table(nutr_df)
    else:
        st.sidebar.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Å—Ç–∞–≤.")



st.title("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–∞–≤–∞ —Ä–∞—Ü–∏–æ–Ω–∞")

# --- –í—ã–±–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ---
ingredient_names = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:", list(food.keys()))

# --- –£–∫–∞–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ ---
st.subheader("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–≤ % –æ—Ç –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞, 100 –≥):")
ingr_ranges = []
for ingr in ingredient_names:
    ingr_ranges.append(st.slider(f"{ingr}", 0, 100, (5, 30)))

# --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º ---
st.subheader("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º:")
nutr_ranges = {}
for nutr in cols_to_divide:
    nutr_ranges[nutr] = st.slider(f"{nutr}", 0, 100, (0, 100))

# --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è ---
A = [
    [food[ing][nutr] if val > 0 else -food[ing][nutr]
     for ing in ingredient_names]
    for nutr in nutr_ranges
    for val in (-nutr_ranges[nutr][0]/100, nutr_ranges[nutr][1]/100)
]
b = [
    val / 100 for nutr in nutr_ranges
    for val in (-nutr_ranges[nutr][0], nutr_ranges[nutr][1])
]

A_eq = [[1 for _ in ingredient_names]]
b_eq = [1.0]

bounds = [(low/100, high/100) for (low, high) in ingr_ranges]
st.subheader("–ß—Ç–æ –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å?")
selected_maximize = st.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏:",
    ['–í–æ–¥–∞', '–ë–µ–ª–∫–∏', '–£–≥–ª–µ–≤–æ–¥—ã', '–ñ–∏—Ä—ã'],
    default=['–í–æ–¥–∞', '–ë–µ–ª–∫–∏', '–£–≥–ª–µ–≤–æ–¥—ã', '–ñ–∏—Ä—ã']  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ
)

f = [-sum(food[i][nutr] for nutr in selected_maximize) for i in ingredient_names]

# --- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ---
if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤"):
    res = linprog(f, A_ub=A, b_ub=b, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method="highs")

    if res.success:
        st.success("–†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!")
        result = {name: round(val * 100, 2) for name, val in zip(ingredient_names, res.x)}
        st.subheader("–°–æ—Å—Ç–∞–≤ (% –æ—Ç –æ–±—â–µ–≥–æ –≤–µ—Å–∞):")
        for name, value in result.items():
            st.write(f"{name}: {value} –≥")

        st.subheader("–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ 100 –≥):")
        nutrients = {
            nutr: round(sum(res.x[i] * food[name][nutr] for i, name in enumerate(ingredient_names)) * 100, 2)
            for nutr in cols_to_divide
        }
        for k, v in nutrients.items():
            st.write(f"{k}: {v}")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
