import streamlit as st
import pandas as pd
from scipy.optimize import linprog  # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
df_ingr_all = pd.read_csv('ingredients_2.csv')
cols_to_divide = ['–í–æ–¥–∞', '–ë–µ–ª–∫–∏', '–£–≥–ª–µ–≤–æ–¥—ã', '–ñ–∏—Ä—ã']

for col in cols_to_divide:
    df_ingr_all[col] = df_ingr_all[col].astype(str).str.replace(',', '.', regex=False)
    df_ingr_all[col] = pd.to_numeric(df_ingr_all[col], errors='coerce')

df_ingr_all[cols_to_divide] = df_ingr_all[cols_to_divide] / 100
df_ingr_all['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ'] = df_ingr_all['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'] + ' ‚Äî ' + df_ingr_all['–û–ø–∏—Å–∞–Ω–∏–µ']

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "selected_ingredients" not in st.session_state:
    st.session_state.selected_ingredients = set()

st.title("üç≤ –í—ã–±–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")

# --- –†–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è –≤—ã–±–æ—Ä: –∫–∞—Ç–µ–≥–æ—Ä–∏—è > –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç > –æ–ø–∏—Å–∞–Ω–∏–µ ---
for category in df_ingr_all['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].dropna().unique():
    with st.expander(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"):
        df_cat = df_ingr_all[df_ingr_all['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]
        for ingredient in df_cat['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'].dropna().unique():
            with st.expander(f"üçñ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: {ingredient}"):
                df_ing = df_cat[df_cat['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'] == ingredient]
                for desc in df_ing['–û–ø–∏—Å–∞–Ω–∏–µ'].dropna().unique():
                    label = f"{ingredient} ‚Äî {desc}"
                    key = f"{category}_{ingredient}_{desc}"
                    if st.button(f"–î–æ–±–∞–≤–∏—Ç—å: {label}", key=key):
                        st.session_state.selected_ingredients.add(label)

# --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ---
st.markdown("### ‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:")
if st.session_state.selected_ingredients:
    for i in sorted(st.session_state.selected_ingredients):
        col1, col2 = st.columns([5, 1])
        col1.write(i)
        if col2.button("‚ùå", key=f"remove_{i}"):
            st.session_state.selected_ingredients.remove(i)
else:
    st.info("–í—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.")

# –ü—Ä–∏–º–µ—Ä: –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
ingredient_names = list(st.session_state.selected_ingredients)
food = df_ingr_all.set_index("–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ")[cols_to_divide].to_dict(orient='index')


# --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ ---
if ingredient_names:
    st.subheader("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–≤ % –æ—Ç 100 –≥):")
    ingr_ranges = []
    for ingr in ingredient_names:
        ingr_ranges.append(st.slider(f"{ingr}", 0, 100, (5, 30)))

    # --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º ---
    st.subheader("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º:")
    nutr_ranges = {}
    for nutr in cols_to_divide:
        nutr_ranges[nutr] = st.slider(f"{nutr}", 0, 100, (0, 100))

    # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ LP ---
    A = [
        [food[ing][nutr] if val > 0 else -food[ing][nutr]
         for ing in ingredient_names]
        for nutr in nutr_ranges
        for val in (-nutr_ranges[nutr][0]/100, nutr_ranges[nutr][1]/100)
    ]
    b = [
        val / 100 for nutr in nutr_ranges
        for val in (-nutr_ranges[nutr][0], nutr_ranges[nutr][1])
    ]

    A_eq = [[1 for _ in ingredient_names]]
    b_eq = [1.0]
    bounds = [(low/100, high/100) for (low, high) in ingr_ranges]

    # --- –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
    st.subheader("–ß—Ç–æ –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å?")
    selected_maximize = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏:",
        cols_to_divide,
        default=cols_to_divide
    )

    f = [-sum(food[i][nutr] for nutr in selected_maximize) for i in ingredient_names]

    # --- –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ---
    if st.button("üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤"):
        res = linprog(f, A_ub=A, b_ub=b, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method="highs")

        if res.success:
            st.success("‚úÖ –†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!")
            result = {name: round(val * 100, 2) for name, val in zip(ingredient_names, res.x)}
            st.markdown("### üì¶ –°–æ—Å—Ç–∞–≤ (–≤ –≥—Ä–∞–º–º–∞—Ö –Ω–∞ 100 –≥):")
            for name, value in result.items():
                st.write(f"{name}: **{value} –≥**")

            st.markdown("### üí™ –ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 100 –≥:")
            nutrients = {
                nutr: round(sum(res.x[i] * food[name][nutr] for i, name in enumerate(ingredient_names)) * 100, 2)
                for nutr in cols_to_divide
            }
            for k, v in nutrients.items():
                st.write(f"**{k}:** {v} –≥")
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
else:
    st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.")
